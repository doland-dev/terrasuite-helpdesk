{"version":3,"file":"TextEditor-bf30f06f.js","sources":["../../../../node_modules/frappe-ui/src/components/TextEditor/TextEditor.vue"],"sourcesContent":["<template>\n  <div\n    class=\"relative w-full\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-if=\"editor\"\n  >\n    <TextEditorBubbleMenu :buttons=\"bubbleMenu\" :options=\"bubbleMenuOptions\" />\n    <TextEditorFixedMenu\n      class=\"w-full overflow-x-auto rounded-t-lg border border-outline-gray-modals\"\n      :buttons=\"fixedMenu\"\n    />\n    <TextEditorFloatingMenu :buttons=\"floatingMenu\" />\n    <slot name=\"top\" />\n    <slot name=\"editor\" :editor=\"editor\">\n      <editor-content :editor=\"editor\" />\n    </slot>\n    <slot name=\"bottom\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport CodeBlockLowlight from '@tiptap/extension-code-block-lowlight'\nimport Placeholder from '@tiptap/extension-placeholder'\nimport Table from '@tiptap/extension-table'\nimport TableCell from '@tiptap/extension-table-cell'\nimport TableHeader from '@tiptap/extension-table-header'\nimport TableRow from '@tiptap/extension-table-row'\nimport TextAlign from '@tiptap/extension-text-align'\nimport TextStyle from '@tiptap/extension-text-style'\nimport Typography from '@tiptap/extension-typography'\nimport StarterKit from '@tiptap/starter-kit'\nimport { Editor, EditorContent, VueNodeViewRenderer } from '@tiptap/vue-3'\nimport { common, createLowlight } from 'lowlight'\nimport { DOMParser } from 'prosemirror-model'\nimport { computed, normalizeClass } from 'vue'\nimport { detectMarkdown, markdownToHTML } from '../../utils/markdown'\nimport { useFileUpload } from '../../utils/useFileUpload'\nimport CodeBlockComponent from './CodeBlockComponent.vue'\nimport NamedColorExtension from './extensions/color'\nimport EmojiExtension from './extensions/emoji/emoji-extension'\nimport { Heading } from './extensions/heading/heading'\nimport NamedHighlightExtension from './extensions/highlight'\nimport { ImageExtension } from './extensions/image'\nimport SlashCommands from './extensions/slash-commands/slash-commands-extension'\nimport { TagExtension, TagNode } from './extensions/tag/tag-extension'\nimport ImageViewerExtension from './image-viewer-extension'\nimport LinkExtension from './link-extension'\nimport configureMention from './mention'\nimport TextEditorBubbleMenu from './TextEditorBubbleMenu.vue'\nimport TextEditorFixedMenu from './TextEditorFixedMenu.vue'\nimport TextEditorFloatingMenu from './TextEditorFloatingMenu.vue'\nimport VideoExtension from './video-extension'\n\nconst lowlight = createLowlight(common)\n\nexport default {\n  name: 'TextEditor',\n  inheritAttrs: false,\n  components: {\n    EditorContent,\n    TextEditorFixedMenu,\n    TextEditorBubbleMenu,\n    TextEditorFloatingMenu,\n  },\n  props: {\n    content: {\n      type: String,\n      default: null,\n    },\n    placeholder: {\n      type: [String, Function],\n      default: '',\n    },\n    editorClass: {\n      type: [String, Array, Object],\n      default: '',\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    bubbleMenu: {\n      type: [Boolean, Array],\n      default: false,\n    },\n    bubbleMenuOptions: {\n      type: Object,\n      default: () => ({}),\n    },\n    fixedMenu: {\n      type: [Boolean, Array],\n      default: false,\n    },\n    floatingMenu: {\n      type: [Boolean, Array],\n      default: false,\n    },\n    extensions: {\n      type: Array,\n      default: () => [],\n    },\n    starterkitOptions: {\n      type: Object,\n      default: () => ({}),\n    },\n    mentions: {\n      type: Array,\n      default: () => [],\n    },\n    tags: {\n      type: Array,\n      default: () => [],\n    },\n    uploadFunction: {\n      type: Function,\n      default: (file: File) => {\n        let fileUpload = useFileUpload()\n        return fileUpload.upload(file).then((fileDoc: any) => {\n          return { src: fileDoc.file_url }\n        })\n      },\n    },\n  },\n  emits: ['change', 'focus', 'blur'],\n  expose: ['editor'],\n  provide() {\n    return {\n      editor: computed(() => this.editor),\n    }\n  },\n  data() {\n    return {\n      editor: null,\n    }\n  },\n  watch: {\n    content(val) {\n      let currentHTML = this.editor.getHTML()\n      if (currentHTML !== val) {\n        this.editor.commands.setContent(val)\n      }\n    },\n    editable(value) {\n      this.editor.setEditable(value)\n    },\n    editorProps: {\n      deep: true,\n      handler(value) {\n        if (this.editor) {\n          this.editor.setOptions({\n            editorProps: value,\n          })\n        }\n      },\n    },\n  },\n  mounted() {\n    this.editor = new Editor({\n      content: this.content || null,\n      editorProps: this.editorProps,\n      editable: this.editable,\n      extensions: [\n        StarterKit.configure({\n          ...this.starterkitOptions,\n          codeBlock: false,\n          heading: false,\n        }),\n        Heading.configure({\n          ...(typeof this.starterkitOptions?.heading === 'object' &&\n          this.starterkitOptions.heading !== null\n            ? this.starterkitOptions.heading\n            : {}),\n        }),\n        Table.configure({\n          resizable: true,\n        }),\n        TableRow,\n        TableHeader,\n        TableCell,\n        Typography,\n        TextAlign.configure({\n          types: ['heading', 'paragraph'],\n        }),\n        TextStyle,\n        NamedColorExtension,\n        NamedHighlightExtension,\n        CodeBlockLowlight.extend({\n          addNodeView() {\n            return VueNodeViewRenderer(CodeBlockComponent)\n          },\n        }).configure({ lowlight }),\n        ImageExtension.configure({\n          uploadFunction: this.uploadFunction,\n        }),\n        ImageViewerExtension,\n        VideoExtension.configure({\n          uploadFunction: this.uploadFunction,\n        }),\n        LinkExtension.configure({\n          openOnClick: false,\n        }),\n        Placeholder.configure({\n          placeholder:\n            typeof this.placeholder === 'function'\n              ? this.placeholder\n              : () => this.placeholder,\n        }),\n        configureMention(this.mentions),\n        EmojiExtension,\n        SlashCommands,\n        TagNode,\n        TagExtension.configure({\n          tags: () => this.tags,\n        }),\n        ...(this.extensions || []),\n      ],\n      onUpdate: ({ editor }) => {\n        this.$emit('change', editor.getHTML())\n      },\n      onFocus: ({ editor, event }) => {\n        this.$emit('focus', event)\n      },\n      onBlur: ({ editor, event }) => {\n        this.$emit('blur', event)\n      },\n    })\n  },\n  beforeUnmount() {\n    this.editor.destroy()\n    this.editor = null\n  },\n  computed: {\n    editorProps() {\n      return {\n        attributes: {\n          class: normalizeClass([\n            'prose prose-table:table-fixed prose-td:p-2 prose-th:p-2 prose-td:border prose-th:border prose-td:border-outline-gray-2 prose-th:border-outline-gray-2 prose-td:relative prose-th:relative prose-th:bg-surface-gray-2',\n            this.editorClass,\n          ]),\n        },\n        clipboardTextParser: (text, $context) => {\n          if (!detectMarkdown(text)) return\n          if (\n            !confirm(\n              'Do you want to convert markdown content to HTML before pasting?',\n            )\n          )\n            return\n\n          let dom = document.createElement('div')\n          dom.innerHTML = markdownToHTML(text)\n          let parser =\n            this.editor.view.someProp('clipboardParser') ||\n            this.editor.view.someProp('domParser') ||\n            DOMParser.fromSchema(this.editor.schema)\n          return parser.parseSlice(dom, {\n            preserveWhitespace: true,\n            context: $context,\n          })\n        },\n      }\n    },\n  },\n}\n</script>\n<style>\n@import './extensions/color/color-styles.css';\n@import './extensions/highlight/highlight-styles.css';\n\n.ProseMirror {\n  outline: none;\n  caret-color: var(--ink-gray-9);\n  word-break: break-word;\n}\n\n/* Firefox */\n.ProseMirror-focused:focus-visible {\n  outline: none;\n}\n\n/* Placeholder */\n.ProseMirror:not(.ProseMirror-focused) p.is-editor-empty::before {\n  content: attr(data-placeholder);\n  float: left;\n  color: var(--ink-gray-4);\n  pointer-events: none;\n  height: 0;\n}\n\n.ProseMirror-selectednode video,\nimg.ProseMirror-selectednode {\n  outline: 2px solid var(--outline-gray-2);\n}\n\n/* Mentions */\n.mention {\n  font-weight: 600;\n  box-decoration-break: clone;\n}\n\n/* Table styles */\n.prose table p {\n  margin: 0;\n}\n\n/* Prosemirror specific table styles */\n.ProseMirror table .selectedCell:after {\n  z-index: 2;\n  position: absolute;\n  content: '';\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n  background: theme('colors.blue.200');\n  opacity: 0.3;\n}\n\n.ProseMirror table .column-resize-handle {\n  position: absolute;\n  right: -1px;\n  top: 0;\n  bottom: -2px;\n  width: 4px;\n  background-color: theme('colors.blue.200');\n  pointer-events: none;\n}\n\n.resize-cursor {\n  cursor: ew-resize;\n  cursor: col-resize;\n}\n\n.tag-item,\n.tag-suggestion-active {\n  background-color: var(--surface-gray-1, #f8f8f8);\n  color: inherit;\n  border: 1px solid transparent;\n  padding: 0px 2px;\n  border-radius: 4px;\n  font-size: 1em;\n  white-space: nowrap;\n  cursor: default;\n}\n\n.tag-item.ProseMirror-selectednode {\n  border-color: var(--outline-gray-3, #c7c7c7);\n}\n\n.tag-suggestion-active {\n  background-color: var(--surface-gray-2, #f3f3f3);\n}\n</style>\n"],"names":["_component_editor_content","_resolveComponent","_createElementBlock","_normalizeClass","_ctx","_normalizeStyle","_component_TextEditorBubbleMenu","$props","_createVNode","_component_TextEditorFixedMenu","_component_TextEditorFloatingMenu","_renderSlot","$data"],"mappings":"4NAKgBA,EAAAC,EAAA,gBAAA,uBAHNC,EAAA,MAAA,CAEL,IAAK,EAAA,MAAAC,EAAA,CAAA,kBAAAC,EAAA,OAAA,KAAA,CAAA,EAGN,MAA2EC,EAAAD,EAAA,OAAA,KAAA,CAAA,EAAA,GAArBE,EAAiB,CAAA,QAAAC,EAAA,WACvE,QAGEA,EAAA,iBAAA,EAFA,KAAM,EAAA,CAAA,UAAA,SAAA,CAAA,EAAAC,EACIC,EAAS,CAAA,MAAA,wEAErB,QAAkDF,EAAA,SAC/B,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EACnBC,EAEOE,EAFsB,CAAA,QAAMH,EAE5B,YAAA,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAI,EADLP,EAAmC,OAAA,KAAA,EAAAO,EAAAP,EAAA,OAAA,SAAA,CAAA,OAAAQ,EAAA,MAAA,EAAA,IAAA,CAErCJ,EAAsBR,EAAA,CAAA,OAAAY,EAAA,MAAA,EAAA,KAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA","x_google_ignoreList":[0]}