import { _ as Z, a as G } from "./TicketFeedback.vue_vue_type_script_setup_true_lang-525e5c2e.js"; import { A as K, C as Q, _ as tt, a as et, b as at, T as st, c as ot, d as nt, e as it, f as lt, g as rt } from "./TicketAgentFields-bddea162.js"; import { s as ct, _ as ut } from "./formCustomisation-44f18b9b.js"; import { j as dt, e as l, k as v, V as mt, d as pt, W as ft, A as p, b as vt, X as E, c as j, M as _t, Y as kt, h as e, f, w as r, y as b, l as d, v as bt, g as i, Z as yt, R as U, u as gt, $ as xt, r as L, x as ht, a0 as At, s as N, H as wt, I as $t } from "./index-54e545bb.js"; import { _ as Ct } from "./Breadcrumbs.vue_vue_type_script_setup_true_lang-04848fc3.js"; import { _ as Vt } from "./Dropdown.vue_vue_type_script_setup_true_lang-20398480.js"; import "./more-horizontal-b561c647.js"; import "./dayjs-8f71cd34.js"; import { L as It } from "./knowledgeBase-de4d1c97.js"; import { _ as Tt } from "./FadedScrollableDiv.vue_vue_type_script_setup_true_lang-897d9728.js"; import { u as St, I as F } from "./ticketStatus-b2a972bb.js"; import { g as jt } from "./globalStore-842ad0ec.js"; import "./merge-149ec802.js"; import "./StarRating.vue_vue_type_script_setup_true_lang-87d7ba3b.js"; import "./AttachmentItem.vue_vue_type_script_setup_true_lang-f98cb03f.js"; import "./FileUploader-3bc7c8ba.js"; import "./TextEditor-bf30f06f.js"; import "./UserAvatar.vue_vue_type_script_setup_true_lang-73349f36.js"; import "./Avatar.vue_vue_type_script_setup_true_lang-33c4215a.js"; import "./Autocomplete-3aa3344b.js"; import "./EmailContent-821cc341.js"; import "./Link-5130f40e.js"; const Ut = {}, Bt = { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", "stroke-width": "1.5", "stroke-linecap": "round", "stroke-linejoin": "round", class: "lucide lucide-list-collapse" }; function Mt(I, _) { return l(), v("svg", Bt, _[0] || (_[0] = [mt('<path d="m3 10 2.5-2.5L3 5"></path><path d="m3 19 2.5-2.5L3 14"></path><path d="M10 6h11"></path><path d="M10 12h11"></path><path d="M10 18h11"></path>', 5)])) } const Dt = dt(Ut, [["render", Mt]]), Rt = { class: "flex flex-col" }, Et = { class: "absolute right-0 pr-2" }, Lt = { key: 1, class: "flex h-12 items-center justify-between py-[7px] px-3 border-b" }, Nt = { class: "flex items-center gap-2 max-w-[50%]" }, Ft = { key: 0 }, zt = { class: "flex items-center gap-2" }, Ht = { key: 2, class: "flex flex-1 overflow-x-hidden" }, Pt = { class: "flex flex-1 flex-col overflow-x-hidden" }, Ot = { class: "flex-1 flex flex-col" }, qt = { key: 0 }, fe = pt({ __name: "MobileTicketAgent", props: { ticketId: { type: String, required: !0 } }, setup(I) { const _ = St(), { getUser: B } = ft(), z = gt(), M = p(null), h = p(null), y = p(null), T = p(!1), A = I; xt("communicationArea", h); const { isMobileView: H } = vt(), { $dialog: P } = jt(), w = p(!1), $ = p(!1), s = E({ url: "terrasuitehelpdesk.helpdesk.doctype.hd_ticket.api.get_one", cache: ["Ticket", A.ticketId], auto: !0, params: { name: A.ticketId }, transform: o => { o._assign && (o.assignees = JSON.parse(o._assign).map(t => ({ name: t, image: B(t).user_image, label: B(t).full_name }))) }, onSuccess: o => { y.value = s.subject, ct(s, { doc: o, call: yt, router: z, toast: U, $dialog: P, updateField: O, createToast: U.create }) } }); function O(o, t, g = () => { }) { C(o, t), g() } const q = j(() => { var t; let o = [{ label: "Tickets", route: { name: "TicketsAgent" } }]; return o.push({ label: (t = s.data) == null ? void 0 : t.subject, route: { name: "TicketAgent" } }), o }), J = j(() => _.options.map(o => ({ label: o, value: o, onClick: () => C("status", o), icon: () => $t(F, { class: _.textColorMap[o] }) }))), S = p(0), W = [{ name: "details", label: "Details", icon: Dt, condition: () => H.value }, { name: "activity", label: "Activity", icon: K }, { name: "email", label: "Emails", icon: Z }, { name: "comment", label: "Comments", icon: Q }], D = j(() => { const o = s.data.communications.map((a, c) => ({ subject: a.subject, content: a.content, sender: { name: a.user.email, full_name: a.user.name }, to: a.recipients, type: "email", key: a.creation, cc: a.cc, bcc: a.bcc, creation: a.communication_date || a.creation, attachments: a.attachments, name: a.name, isFirstEmail: c === 0 })), t = s.data.comments.map(a => ({ name: a.name, type: "comment", key: a.creation, commentedBy: a.commented_by, commenter: a.user.name, creation: a.creation, content: a.content, attachments: a.attachments })), g = [...s.data.history, ...s.data.views].map(a => ({ type: "history", key: a.creation, content: a.action ? a.action : "viewed this", creation: a.creation, user: a.user.name + " " })), u = [...o, ...t, ...g].sort((a, c) => new Date(a.creation) - new Date(c.creation)), x = []; let m = 0; for (; m < u.length;) { const a = u[m]; if (a.type === "history") { a.relatedActivities = [a]; for (let c = m + 1; c < u.length + 1; c++) { const k = u[c]; if (k && k.user === a.user) a.relatedActivities.push(k); else { x.push(a), m = c - 1; break } } } else x.push(a); m++ } return x }); function X(o) { return o === "activity" ? D.value : D.value.filter(t => t.type === o) } function C(o, t) { T.value = !0, E({ url: "frappe.client.set_value", params: { doctype: "HD Ticket", name: A.ticketId, fieldname: o, value: t }, auto: !0, onSuccess: () => { T.value = !1, s.reload(), U.success("Ticket updated") } }) } return _t(() => { document.title = A.ticketId }), kt(() => { document.title = "Helpdesk" }), (o, t) => { var c, k; const g = L("FeatherIcon"), u = L("Button"), x = ut, m = rt, a = G; return l(), v("div", Rt, [e(s).data ? (l(), f(e(It), { key: 0 }, { "left-header": r(() => [i(e(Ct), { items: q.value }, null, 8, ["items"])]), "right-header": r(() => [d("div", Et, [i(e(Vt), { options: J.value }, { default: r(({ open: n }) => [i(u, { label: e(s).data.status }, { prefix: r(() => [i(e(F), { class: ht(e(_).textColorMap[e(s).data.status]) }, null, 8, ["class"])]), suffix: r(() => [i(g, { name: n ? "chevron-up" : "chevron-down", class: "h-4" }, null, 8, ["name"])]), _: 2 }, 1032, ["label"])]), _: 1 }, 8, ["options"])])]), _: 1 })) : b("", !0), e(s).data ? (l(), v("header", Lt, [d("div", Nt, [(c = e(s).data.assignees) != null && c.length ? (l(), v("div", Ft, [(l(), f(bt(e(s).data.assignees.length == 1 ? "Button" : "div"), null, { default: r(() => [i(e(Tt), { avatars: e(s).data.assignees, onClick: t[0] || (t[0] = n => w.value = !0) }, null, 8, ["avatars"])]), _: 1 }))])) : (l(), v("button", { key: 1, class: "rounded bg-gray-100 px-2 py-1.5 text-base text-gray-800", onClick: t[1] || (t[1] = n => w.value = !0) }, " Assign "))]), d("div", zt, [e(s).data._customActions ? (l(), f(x, { key: 0, actions: e(s).data._customActions }, null, 8, ["actions"])) : b("", !0)])])) : b("", !0), e(s).data ? (l(), v("div", Ht, [d("div", Pt, [d("div", Ot, [i(e(nt), { modelValue: S.value, "onUpdate:modelValue": t[6] || (t[6] = n => S.value = n), tabs: W }, { default: r(() => [i(e(tt)), i(e(et), { class: "h-full" }, { default: r(({ tab: n }) => { var R; return [n.name === "details" ? (l(), v("div", qt, [i(m, { contact: e(s).data.contact, "onEmail:open": t[2] || (t[2] = V => h.value.toggleEmailBox()) }, null, 8, ["contact"]), e(s).data.feedback_rating ? (l(), f(a, { key: 0, class: "border-b px-6 py-3 text-base text-gray-600", ticket: e(s).data }, null, 8, ["ticket"])) : b("", !0), t[15] || (t[15] = d("h3", { class: "px-6 pt-3 font-semibold text-base" }, "SLA", -1)), i(at, { ticket: e(s).data }, null, 8, ["ticket"]), t[16] || (t[16] = d("h3", { class: "px-6 pt-3 font-semibold text-base" }, "Details", -1)), i(st, { ticket: e(s).data, onUpdate: t[3] || (t[3] = ({ field: V, value: Y }) => C(V, Y)), class: "!border-0" }, null, 8, ["ticket"])])) : (l(), f(e(ot), { key: 1, ref_key: "ticketAgentActivitiesRef", ref: M, activities: X(n.name), title: n.label, "ticket-status": (R = e(s).data) == null ? void 0 : R.status, onUpdate: t[4] || (t[4] = () => { e(s).reload() }), "onEmail:reply": t[5] || (t[5] = V => { h.value.replyToEmail(V) }) }, null, 8, ["activities", "title", "ticket-status"]))] }), _: 1 })]), _: 1 }, 8, ["modelValue"]), (l(), f(e(it), { class: "sticky bottom-0 z-50 bg-white", ref_key: "communicationAreaRef", ref: h, modelValue: e(s).data, "onUpdate:modelValue": t[7] || (t[7] = n => e(s).data = n), "to-emails": [e(s).data.raised_by], "cc-emails": [], "bcc-emails": [], key: (k = e(s).data) == null ? void 0 : k.name, onUpdate: t[8] || (t[8] = () => { e(s).reload(), S.value !== 0 && M.value.scrollToLatestActivity() }) }, null, 8, ["modelValue", "to-emails"]))])])])) : b("", !0), e(s).data ? (l(), f(e(lt), { key: 3, modelValue: w.value, "onUpdate:modelValue": t[9] || (t[9] = n => w.value = n), assignees: e(s).data.assignees, docname: I.ticketId, doctype: "HD Ticket", onUpdate: t[10] || (t[10] = () => { e(s).reload() }) }, null, 8, ["modelValue", "assignees", "docname"])) : b("", !0), i(e(wt), { modelValue: $.value, "onUpdate:modelValue": t[14] || (t[14] = n => $.value = n) }, { "body-title": r(() => t[17] || (t[17] = [d("h3", null, "Rename", -1)])), "body-content": r(() => [i(e(At), { modelValue: y.value, "onUpdate:modelValue": t[11] || (t[11] = n => y.value = n), type: "text", size: "sm", variant: "subtle", disabled: !1, label: "New Subject" }, null, 8, ["modelValue"])]), actions: r(() => [i(u, { variant: "solid", disabled: !y.value, loading: T.value, onClick: t[12] || (t[12] = () => { C("subject", y.value), $.value = !1 }) }, { default: r(() => t[18] || (t[18] = [N(" Confirm ")])), _: 1, __: [18] }, 8, ["disabled", "loading"]), i(u, { class: "ml-2", onClick: t[13] || (t[13] = n => $.value = !1) }, { default: r(() => t[19] || (t[19] = [N(" Close ")])), _: 1, __: [19] })]), _: 1 }, 8, ["modelValue"])]) } } }); export { fe as default };
//# sourceMappingURL=MobileTicketAgent-c728ad52.js.map
