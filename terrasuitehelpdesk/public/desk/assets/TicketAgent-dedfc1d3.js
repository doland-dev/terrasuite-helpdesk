import { s as le, _ as re } from "./formCustomisation-44f18b9b.js"; import { r as U, h as t, a1 as ce, e as d, k as M, t as P, D as Q, a2 as L, f as g, v as G, d as N, m as W, n as ue, A as h, X as O, R as B, a3 as de, a4 as K, w as v, l as $, s as X, g as r, y as V, H as ee, c as F, a5 as me, W as pe, M as fe, a6 as Y, Y as ke, O as ve, Z as ge, q as ye, u as _e, $ as be, x as xe, a0 as we, Q as he, I as $e } from "./index-54e545bb.js"; import { _ as Te } from "./Breadcrumbs.vue_vue_type_script_setup_true_lang-04848fc3.js"; import { _ as Ve } from "./Dropdown.vue_vue_type_script_setup_true_lang-20398480.js"; import { g as Ae, b as Ce, T as je, A as Se, C as Ie, _ as Me, a as Ue, c as Re, d as Be, e as De, f as Ee } from "./TicketAgentFields-bddea162.js"; import { T as Fe, u as qe, s as R } from "./more-horizontal-b561c647.js"; import "./dayjs-8f71cd34.js"; import { L as He } from "./knowledgeBase-de4d1c97.js"; import { _ as Le } from "./FadedScrollableDiv.vue_vue_type_script_setup_true_lang-897d9728.js"; import { a as Oe, _ as Pe } from "./TicketFeedback.vue_vue_type_script_setup_true_lang-525e5c2e.js"; import { u as Ne, I as Z } from "./ticketStatus-b2a972bb.js"; import { g as ze } from "./globalStore-842ad0ec.js"; import { _ as Je } from "./Dropdown-a6c1fbb4.js"; import { L as te } from "./merge-149ec802.js"; import { _ as Qe } from "./Link-5130f40e.js"; import "./AttachmentItem.vue_vue_type_script_setup_true_lang-f98cb03f.js"; import "./FileUploader-3bc7c8ba.js"; import "./TextEditor-bf30f06f.js"; import "./UserAvatar.vue_vue_type_script_setup_true_lang-73349f36.js"; import "./Avatar.vue_vue_type_script_setup_true_lang-33c4215a.js"; import "./Autocomplete-3aa3344b.js"; import "./EmailContent-821cc341.js"; import "./StarRating.vue_vue_type_script_setup_true_lang-87d7ba3b.js"; const We = { __name: "Icon", props: { icon: { type: [String, Object], required: !0 } }, setup(p) { return (w, y) => { const b = U("FeatherIcon"); return t(ce)(p.icon) ? (d(), M("div", Q(L({ key: 0 }, w.$attrs)), P(p.icon), 17)) : typeof p.icon == "string" ? (d(), g(b, L({ key: 1, name: p.icon }, w.$attrs), null, 16, ["name"])) : (d(), g(G(p.icon), Q(L({ key: 2 }, w.$attrs)), null, 16)) } } }, Xe = { class: "flex flex-col gap-4" }, Ye = { class: "text-p-base text-ink-gray-8" }, Ze = { class: "whitespace-nowrap font-semibold" }, Ge = { class: "flex items-center gap-2 rounded-md p-2 ring-1 ring-gray-200" }, Ke = N({ __name: "TicketMergeModal", props: W({ ticket: {} }, { modelValue: { type: Boolean }, modelModifiers: {} }), emits: W(["update"], ["update:modelValue"]), setup(p, { emit: w }) { const y = p, b = w, A = ue(p, "modelValue"); function C() { const u = { status: ["in", ["Open", "Replied"]], is_merged: 0, name: ["!=", y.ticket.name] }; return y.ticket.customer && (u.customer = y.ticket.customer), y.ticket.raised_by && (u.raised_by = ["like", `%${y.ticket.raised_by}%`]), u } const m = h(null), l = h(null), c = O({ url: "terrasuitehelpdesk.helpdesk.doctype.hd_ticket.api.merge_ticket", makeParams({ source: u, target: i }) { return { source: u, target: i } }, validate({ source: u, target: i }) { if (!u) throw { message: "Category is required" }; if (!i) throw { message: "Ticket to merged with is required" } }, onSuccess: () => { B.success("Ticket merged successfully"), b("update"), A.value = !1, window.open(window.location.origin + "/helpdesk/tickets/" + m.value, "_blank"), m.value = null } }), S = de({ doctype: "HD Ticket", filters: { name: ["=", m] }, fields: ["subject"], onSuccess: u => { u.length > 0 && (l.value = u[0].subject) } }); K(() => m.value, u => { u && (S.update({ filters: { name: ["=", u] } }), S.reload()) }); function j() { c.submit({ source: y.ticket.name, target: m.value }) } return (u, i) => { const s = Qe, q = U("FormControl"), H = U("Button"); return d(), g(t(ee), { options: { title: "Merge with another ticket" }, modelValue: A.value, "onUpdate:modelValue": i[2] || (i[2] = I => A.value = I) }, { "body-content": v(() => [$("div", Xe, [$("p", Ye, [i[3] || (i[3] = X(" All comments and emails of the ticket ")), $("span", Ze, "#" + P(u.ticket.name), 1), i[4] || (i[4] = X(" will be moved to the selected ticket. "))]), r(s, { class: "form-control", doctype: "HD Ticket", placeholder: "Select Ticket", filters: C(), label: "Ticket", "page-length": 10, value: m.value, "show-description": !0, onChange: i[0] || (i[0] = I => m.value = String(I)) }, null, 8, ["filters", "value"]), m.value ? (d(), g(q, { key: 0, label: "Ticket Subject", type: "text", modelValue: l.value, "onUpdate:modelValue": i[1] || (i[1] = I => l.value = I), disabled: !0 }, null, 8, ["modelValue"])) : V("", !0), $("div", Ge, [r(t(Fe), { class: "h-6 w-5 w-min-5 w-max-5 min-h-5 max-w-5 text-yellow-500" }), i[5] || (i[5] = $("div", { class: "text-wrap text-sm text-gray-700" }, " This action is irreversible. ", -1))])])]), actions: v(() => [r(H, { class: "w-full", variant: "solid", label: m.value ? `Merge with ticket #${m.value} ` : "Select Ticket", loading: t(c).loading, "icon-left": m.value && t(te), onClick: j }, null, 8, ["label", "loading", "icon-left"])]), _: 1 }, 8, ["modelValue"]) } } }), et = { class: "flex !w-[382px] flex-col justify-between border-l" }, tt = { class: "flex h-10.5 items-center border-b px-5 py-2.5 text-lg font-medium text-ink-gray-9 justify-between" }, at = N({ __name: "TicketAgentSidebar", props: { ticket: {} }, emits: ["update", "email:open", "reload"], setup(p, { emit: w }) { const y = p, b = w; function A(l = null) { var c; l.value && typeof l.value == "object" && (l.value = ((c = l.value.target) == null ? void 0 : c.value) || null), b("update", l) } const C = h(!1), m = F(() => !y.ticket.is_merged && ["Open", "Replied"].includes(y.ticket.status)); return (l, c) => { const S = U("Button"), j = Je, u = Oe; return d(), M("div", et, [$("div", tt, [$("span", { class: "cursor-copy text-lg font-semibold", onClick: c[0] || (c[0] = i => t(me)(l.ticket.name, `'${l.ticket.name}' copied to clipboard`)) }, "#" + P(l.ticket.name), 1), m.value ? (d(), g(j, { key: 0, options: [{ label: "Merge Ticket", onClick: () => C.value = !0, icon: t(te), condition: () => !l.ticket.is_merged }] }, { default: v(() => [r(S, { icon: "more-horizontal", class: "text-gray-600", variant: "ghost" })]), _: 1 }, 8, ["options"])) : V("", !0)]), r(Ae, { contact: l.ticket.contact, "onEmail:open": c[1] || (c[1] = i => b("email:open", i)) }, null, 8, ["contact"]), l.ticket.feedback_rating ? (d(), g(u, { key: 0, class: "py-3 !px-6 !gap-3 text-base text-gray-600", ticket: l.ticket }, null, 8, ["ticket"])) : V("", !0), r(Ce, { ticket: l.ticket }, null, 8, ["ticket"]), r(je, { ticket: l.ticket, onUpdate: A }, null, 8, ["ticket"]), C.value ? (d(), g(Ke, { key: 1, ticket: l.ticket, modelValue: C.value, "onUpdate:modelValue": c[2] || (c[2] = i => C.value = i), onUpdate: c[3] || (c[3] = i => b("reload")) }, null, 8, ["ticket", "modelValue"])) : V("", !0)]) } } }), st = { class: "flex flex-col" }, ot = { key: 1 }, nt = { key: 1, class: "flex h-full overflow-hidden" }, it = { class: "flex flex-1 flex-col max-w-[calc(100%-382px)]" }, lt = { class: "overflow-y-hidden flex flex-1 !h-full flex-col" }, rt = { class: "flex flex-col flex-1 gap-3" }, Mt = N({ __name: "TicketAgent", props: { ticketId: { type: String, required: !0 } }, setup(p) { const w = ye(), y = _e(), b = Ne(), { getUser: A } = pe(), { $dialog: C } = ze(), m = h(null), l = h(null), c = h(""), S = h(!1), j = p; K(() => j.ticketId, () => { s.reload() }); const { findView: u } = qe("HD Ticket"); be("communicationArea", l); const i = h(!1), s = O({ url: "terrasuitehelpdesk.helpdesk.doctype.hd_ticket.api.get_one", auto: !0, makeParams: () => ({ name: j.ticketId }), transform: o => { o._assign && (o.assignees = JSON.parse(o._assign).map(e => ({ name: e, image: A(e).user_image, label: A(e).full_name }))), c.value = o.subject }, onSuccess: o => { document.title = o.subject, le(s, { doc: o, call: ge, router: y, toast: B, $dialog: C, updateField: q, createToast: B.create }) } }); function q(o, e, f = () => { }) { E(o, e), f() } const H = F(() => { var e, f, x, T; let o = [{ label: "Tickets", route: { name: "TicketsAgent" } }]; if (w.query.view) { const k = u(w.query.view); k && o.push({ label: (e = k.value) == null ? void 0 : e.label, icon: he((f = k.value) == null ? void 0 : f.icon), route: { name: "TicketsAgent", query: { view: (x = k.value) == null ? void 0 : x.name } } }) } return o.push({ label: (T = s.data) == null ? void 0 : T.subject, onClick: () => { i.value = !0 } }), o }), I = () => { var o; c.value !== ((o = s.data) == null ? void 0 : o.subject) && (E("subject", c.value), i.value = !1) }, ae = F(() => b.options.map(o => ({ label: o, value: o, onClick: () => E("status", o), icon: () => $e(Z, { class: b.textColorMap[o] }) }))), z = h(0), se = [{ name: "activity", label: "Activity", icon: Se }, { name: "email", label: "Emails", icon: Pe }, { name: "comment", label: "Comments", icon: Ie }], J = F(() => { const o = s.data.communications.map((a, n) => ({ subject: a.subject, content: a.content, sender: { name: a.user.email, full_name: a.user.name }, to: a.recipients, type: "email", key: a.creation, cc: a.cc, bcc: a.bcc, creation: a.communication_date || a.creation, attachments: a.attachments, name: a.name, isFirstEmail: n === 0 })), e = s.data.comments.map(a => ({ name: a.name, type: "comment", key: a.creation, commentedBy: a.commented_by, commenter: a.user.name, creation: a.creation, content: a.content, attachments: a.attachments })), f = [...s.data.history, ...s.data.views].map(a => ({ type: "history", key: a.creation, content: a.action ? a.action : "viewed this", creation: a.creation, user: a.user.name + " " })), x = [...o, ...e, ...f].sort((a, n) => new Date(a.creation) - new Date(n.creation)), T = []; let k = 0; for (; k < x.length;) { const a = x[k]; if (a.type === "history") { a.relatedActivities = [a]; for (let n = k + 1; n < x.length + 1; n++) { const _ = x[n]; if (_ && _.user === a.user) a.relatedActivities.push(_); else { T.push(a), k = n - 1; break } } } else T.push(a); k++ } return T }); function oe(o) { return o === "activity" ? J.value : J.value.filter(e => e.type === o) } const D = h(!1); function E(o, e) { D.value = !1, e !== s.data[o] && (ne(o, e), O({ url: "frappe.client.set_value", params: { doctype: "HD Ticket", name: j.ticketId, fieldname: o, value: e }, debounce: 500, auto: !0, onSuccess: () => { S.value = !1, D.value = !1, s.reload() }, onError: f => { if (D.value) return; D.value = !0; const x = f.exc_type ? (f.messages || f.message || []).join(", ") : f.message; B.error(x), s.reload() } })) } function ne(o, e) { s.data[o] = e, B.success("Ticket updated") } return fe(() => { Y.on("helpdesk:ticket-update", o => { o === Number(j.ticketId) && s.reload() }) }), ke(() => { document.title = "Helpdesk", Y.off("helpdesk:ticket-update") }), (o, e) => { var k, a; const f = re, x = U("FeatherIcon"), T = U("Button"); return d(), M("div", st, [t(s).data ? (d(), g(t(He), { key: 0 }, { "left-header": v(() => [r(t(Te), { items: H.value, class: "breadcrumbs" }, { prefix: v(({ item: n }) => [n.icon ? (d(), g(t(We), { key: 0, icon: n.icon, class: "mr-1 h-4 flex items-center justify-center self-center" }, null, 8, ["icon"])) : V("", !0)]), _: 1 }, 8, ["items"])]), "right-header": v(() => { var n; return [t(s).data._customActions ? (d(), g(f, { key: 0, actions: t(s).data._customActions }, null, 8, ["actions"])) : V("", !0), (n = t(s).data.assignees) != null && n.length ? (d(), M("div", ot, [(d(), g(G(t(s).data.assignees.length == 1 ? "Button" : "div"), null, { default: v(() => [r(t(Le), { avatars: t(s).data.assignees, onClick: e[0] || (e[0] = _ => R.value = !0) }, null, 8, ["avatars"])]), _: 1 }))])) : (d(), M("button", { key: 2, class: "rounded bg-gray-100 px-2 py-1.5 text-base text-gray-800", onClick: e[1] || (e[1] = _ => R.value = !0) }, " Assign ")), r(t(Ve), { options: ae.value }, { default: v(({ open: _ }) => [r(T, { label: t(s).data.status }, { prefix: v(() => [r(t(Z), { class: xe(t(b).textColorMap[t(s).data.status]) }, null, 8, ["class"])]), suffix: v(() => [r(x, { name: _ ? "chevron-up" : "chevron-down", class: "h-4" }, null, 8, ["name"])]), _: 2 }, 1032, ["label"])]), _: 1 }, 8, ["options"])] }), _: 1 })) : V("", !0), t(s).data ? (d(), M("div", nt, [$("div", it, [$("div", lt, [r(t(Be), { modelValue: z.value, "onUpdate:modelValue": e[4] || (e[4] = n => z.value = n), tabs: se }, { default: v(() => [r(t(Me)), r(t(Ue), { class: "h-full" }, { default: v(({ tab: n }) => { var _; return [r(t(Re), { ref_key: "ticketAgentActivitiesRef", ref: m, activities: oe(n.name), title: n.label, "ticket-status": (_ = t(s).data) == null ? void 0 : _.status, onUpdate: e[2] || (e[2] = () => { t(s).reload() }), "onEmail:reply": e[3] || (e[3] = ie => { l.value.replyToEmail(ie) }) }, null, 8, ["activities", "title", "ticket-status"])] }), _: 1 })]), _: 1 }, 8, ["modelValue"])]), (d(), g(t(De), { ref_key: "communicationAreaRef", ref: l, modelValue: t(s).data, "onUpdate:modelValue": e[5] || (e[5] = n => t(s).data = n), "to-emails": [(k = t(s).data) == null ? void 0 : k.raised_by], "cc-emails": [], "bcc-emails": [], key: (a = t(s).data) == null ? void 0 : a.name, onUpdate: e[6] || (e[6] = () => { t(s).reload(), m.value.scrollToLatestActivity() }) }, null, 8, ["modelValue", "to-emails"]))]), r(t(at), { ticket: t(s).data, onUpdate: e[7] || (e[7] = ({ field: n, value: _ }) => E(n, _)), "onEmail:open": e[8] || (e[8] = n => l.value.toggleEmailBox()), onReload: e[9] || (e[9] = n => t(s).reload()) }, null, 8, ["ticket"])])) : V("", !0), t(s).data ? (d(), g(t(Ee), { key: 2, modelValue: t(R), "onUpdate:modelValue": e[10] || (e[10] = n => ve(R) ? R.value = n : null), assignees: t(s).data.assignees, docname: p.ticketId, doctype: "HD Ticket", onUpdate: e[11] || (e[11] = () => { t(s).reload() }) }, null, 8, ["modelValue", "assignees", "docname"])) : V("", !0), r(t(ee), { modelValue: i.value, "onUpdate:modelValue": e[13] || (e[13] = n => i.value = n), options: { title: "Rename Subject" } }, { "body-content": v(() => [$("div", rt, [r(t(we), { modelValue: c.value, "onUpdate:modelValue": e[12] || (e[12] = n => c.value = n), type: "textarea", size: "sm", variant: "subtle", disabled: !1 }, null, 8, ["modelValue"]), r(T, { variant: "solid", loading: S.value, label: "Rename", onClick: I }, null, 8, ["loading"])])]), _: 1 }, 8, ["modelValue"])]) } } }); export { Mt as default };
//# sourceMappingURL=TicketAgent-dedfc1d3.js.map
